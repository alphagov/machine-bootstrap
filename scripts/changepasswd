#!/usr/bin/env python
import argparse
import crypt
import getpass
import paramiko
from passlib.hash import sha512_crypt
import random
import string

# Argument parsing
parser = argparse.ArgumentParser(description='Bootstrap a machine')
parser.add_argument('ip',help="IP of machine to connect to")
parser.add_argument('--username','-u',nargs='?',default='ubuntu',help="Username to connect as (ubuntu)")
parser.add_argument('--prompt','-p',nargs='?',const=True,default=False,help="Prompt for password (otherwise assume it is 'ubuntu')")
parser.add_argument('--port','-P',nargs='?',type=int,default=22,help="Port to connect to (22)")
parser.add_argument('--debug','-d',nargs='?',const=True,default=False,help="Show debug output")
config = parser.parse_args()
if config.prompt:
    config.password = getpass.getpass('Enter the SSH password for this machine: ')
else:
    config.password = 'ubuntu'
# End argument parsing

# Password generation and Encryption
def choose_random_chars(alphabet,length):
    chars = []
    for i in range(length):
        chars.append(random.choice(alphabet))
    return "".join(chars)

def generate_salt(length):
    salt_alphabet = string.digits + string.ascii_letters + "./"
    return choose_random_chars(salt_alphabet,length)

def generate_password(length):
    password_alphabet = string.digits + string.ascii_letters
    return choose_random_chars(password_alphabet,length)

def encrypt_password(password):
    return sha512_crypt.encrypt(password,salt=generate_salt(8),rounds=5000)

def new_password(user):
    password = generate_password(12)
    print "Password for %s user will be %s" % (user,password)
    return "%s:" % user + encrypt_password(password) + ":15839:0:99999:7:::"

# End password generation and encryption

# SSH connections
def ssh_connect(password=config.password):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    print 'Connecting to %s on port %s as %s' % (config.ip,config.port,config.password)
    ssh.connect(config.ip,username=config.username,password=password,port=config.port)
    return ssh

def ssh_runcommand(session,command):
    stdin, stdout, stderr = session.exec_command(command)
    for line in stdout.readlines():
        if config.debug:
            print '[DEBUG] stdout: %s' % line
    for line in stderr.readlines():
        if config.debug:
            print '[DEBUG] stderr: %s' % line

def ssh_changepassword(user):
    command = "sudo sed -i 's;" + user + ":.*;" + new_password(user) + ";g' /etc/shadow"
    ssh_runcommand(ssh_connect(),command)

# End SSH connections

ssh_changepassword('ubuntu')
#ssh_changepassword('root')
