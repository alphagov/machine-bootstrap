#!/usr/bin/env python
"""
Title:
License: MIT

Description:

    This script presumes that you have a user with passwordless sudo access and
    you wish to change the password of that user and apply the puppet manifest
    in the puppet directory to that machine. To avoid password prompting
    and ever putting the clear-text password on the new VM, the mechanism of
    changing is to generate an Ubuntu shadow file entry and place it into the
    /etc/shadow file via SSH.

    Given only an IP address, the script will assume that it is connecting as
    `ubuntu` with password `ubuntu` on port 22 and will change the password to
    a random alphanumeric string of length 12 chars. All of these defaults are
    optional.

    It will then connect to the machine with the new password and perform any
    configuration via puppet.

Usage:

    harden [-h] [-d] [-l LENGTH] [-p] [-P PORT] [-u USERNAME] ip

    Hardens a default Ubuntu VM using SSH and Puppet

    positional arguments:
        ip           IP of machine to connect to

    optional arguments:
        -h, --help   show this help message and exit
        -C, --change-password-only
                     Change password, but do not attempt to run puppet on the machine [False]
        -d           Show debug output
        -H, --harden-only
                     Do not change the password, simply run Puppet to harden the machine [False]
        -l LENGTH    Length of auto-generated password [12]
        -p           Prompt for password [otherwise assume it is 'ubuntu']
        -P PORT      Port to connect to [22]
        -u USERNAME  Username to connect as [ubuntu]

"""

# Standard python libraries
import argparse
import crypt
import getpass
import random
import string
import sys
from contextlib import closing
# Non-standard python libraries
try:
    import paramiko
except:
    print "Paramiko not installed, please run 'pip install paramiko'"
    sys.exit(255)
try:
    import scpclient
except:
    print "Scpclient not installed, please run 'pip install scpclient'"
    sys.exit(255)
try:
    from passlib.hash import sha512_crypt
except:
    print "PassLib not installed, please run 'pip install passlib'"
    sys.exit(255)

# Argument parsing
parser = argparse.ArgumentParser(description='Hardens a default Ubuntu VM using SSH and Puppet')
parser.add_argument('ip',help="IP of machine to connect to")
parser.add_argument('-C','--change-password-only',dest='password_only',action='store_true',default=False,help="Change password, but do not attempt to run puppet on the machine [False]")
parser.add_argument('-d',dest='debug',action='store_true',default=False,help="Show debug output")
parser.add_argument('-H','--harden-only',dest='harden_only',action='store_true',default=False,help="Do not change the password, simply run Puppet to harden the machine [False]")
parser.add_argument('-l',dest='length',type=int,default=12,help="Length of auto-generated password [12]")
parser.add_argument('-p',dest='prompt',action='store_true',default=False,help="Prompt for password [otherwise assume it is 'ubuntu']")
parser.add_argument('-P',dest='port',type=int,default=22,help="Port to connect to [22]")
parser.add_argument('-u',dest='username',default='ubuntu',help="Username to connect as [ubuntu]")
config = parser.parse_args()
if config.prompt:
    config.password = getpass.getpass('Password for %s@%s: ' % (config.username,config.ip))
else:
    config.password = 'ubuntu'
# End argument parsing

# General helper functions
def throw_error(string,exitcode):
    """Print a message and exit with a status code"""
    print "[ERROR]: %s, try again with debug mode on (-d)" % string
    sys.exit(exitcode)

def debug_print(message):
    """Print a message only if th debug flag (-d) is set"""
    if config.debug:
        print "[DEBUG]: %s" % message
# End helper functions

# Password generation and Encryption
def choose_random_chars(alphabet,length):
    """From an alphabet, choose a number of random characters"""
    chars = []
    for i in range(length):
        chars.append(random.choice(alphabet))
    return "".join(chars)

def generate_salt(length):
    """Generate a random string of length to be used as a SHAS512 salt"""
    salt_alphabet = string.digits + string.ascii_letters + "./"
    salt = choose_random_chars(salt_alphabet,length)
    debug_print("... ... SALT %s" % salt)
    return salt

def generate_password(length):
    """Generate a random string of length to be used as a password"""
    password_alphabet = string.digits + string.ascii_letters
    password = choose_random_chars(password_alphabet,length)
    debug_print("... ... PASSWORD %s" % password)
    return password

def encrypt_password(password):
    """Generate the salted password hash using SHA512 with the same options as Ubuntu 12.04"""
    return sha512_crypt.encrypt(password,salt=generate_salt(8),rounds=5000)

def new_password(user):
    """Output {password => "PLAINTEXT", shadow => "Shadow entry"} dict for later use"""
    debug_print("... Generating password")
    output = {}
    output['password'] = generate_password(config.length)
    output['shadow'] = "%s:" % user + encrypt_password(output['password']) + ":15839:0:99999:7:::"
    debug_print("... ... SHADOW %s " % output['shadow'])
    return output
# End password generation and encryption

# SSH connections
def ssh_connect(password=config.password):
    """Connect to config.ip as config.username on config.port with a password (defaults to config.password)"""
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    debug_print('... Connecting to %s on port %s with %s:%s' % (config.ip,config.port,config.username,password))
    try:
        ssh.connect(config.ip,username=config.username,password=password,port=config.port)
    except:
        throw_error("Could not connect to machine",1)
    return ssh

def ssh_runcommand(session,command):
    """Given an SSH session, run a command and if debug mode is enabled, show the output"""
    try:
        debug_print('Running command: %s' % command)
        stdin, stdout, stderr = session.exec_command(command)
    except:
        throw_error("Command failed - %s" % command,2)
    for line in stdout.readlines():
            debug_print('stdout: %s' % line.rstrip())
    for line in stderr.readlines():
            debug_print('stderr: %s' % line.rstrip())

def ssh_changepassword(user):
    """SSH to to a machine, try to change the password and test for success"""
    passwd = new_password(user)
    global config
    command = "sudo sed -i 's;" + user + ":.*;" + passwd['shadow'] + ";g' /etc/shadow"
    ssh_runcommand(ssh_connect(),command)
    try:
        debug_print("... Testing new password")
        ssh_runcommand(ssh_connect(passwd['password']),'uname -a')
        return passwd['password']
    except:
        throw_error("Could not connect to machine after password change",3)

def ssh_copydir(session,sourcedir,destdir):
    with closing(scpclient.WriteDir(session.get_transport(), destdir)) as scp:
        scp.send_dir(sourcedir, preserve_times=True)

def ssh_copyfile(session,sourcefile,destdir):
    with closing(scpclient.Write(session.get_transport(),destdir)) as scp:
        scp.send_file(sourcefile, preserve_times=True)

# End SSH connections

# Puppet related tasks
def apply_puppet(password):
    session = ssh_connect(password)
    # Copy the puppet dir from this repo
    ssh_copydir(session,'./puppet','/tmp/')
    # Puppet package is 2.7.11, we need >2.7.13 so remove it
    ssh_runcommand(session,'sudo apt-get -y remove puppet puppet-common facter')
    # Install a good version of Puppet
    ssh_runcommand(session,'sudo gem install --no-rdoc --no-ri puppet')
    ssh_runcommand(session,'sudo gem install --no-rdoc --no-ri librarian-puppet')
    ssh_runcommand(session,'sudo gem install --no-rdoc --no-ri facter')
    # Download our included puppet modules
    ssh_runcommand(session,'cd /tmp/puppet; sudo librarian-puppet install')
    # Run puppet
    ssh_runcommand(session,'sudo puppet apply --modulepath=/tmp/puppet/vendor/modules /tmp/puppet/manifests/site.pp')
    print "Hardening steps applied to machine via Puppet"

# End puppet related tasks

def main():
    password = ""
    if config.harden_only and config.password_only:
        throw_error("-H and -C are mutually exclusive. If you want to change the password and harden the machine, remove both options",254)
    if not config.harden_only:
        password = ssh_changepassword(config.username)
        print "Password for %s@%s is now %s" % (config.username,config.ip,password)
    if not config.password_only:
        if password == "":
            puppet_password = config.password
        else:
            puppet_password = password
        apply_puppet(puppet_password)

if __name__ == "__main__":
    main()
